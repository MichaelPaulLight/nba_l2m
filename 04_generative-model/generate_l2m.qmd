```{r}
library(ggthemes)

# Definng a custom theme
theme_report <- function() {
  theme_minimal() +
  theme(
    text = element_text(family = "Arial", color = "#333333"),
    plot.title = element_text(face = "bold", size = 16, color = "#2c3e50"),
    axis.title = element_text(size = 12, color = "#2c3e50"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10)
  )
}

# Defining a color palette
report_colors <- c("#3498db", "#e74c3c", "#2ecc71", "#f39c12", "#9b59b6", 
                   "#1abc9c", "#d35400", "#34495e", "#7f8c8d", "#2980b9", "#8e44ad")
```

```{r}
library(tidyverse)
```

First we'll create a simple framework for generating games

```{r}
n_games <- 5       # Number of games
n_players <- 25    # Number of players
n_events_per_game <- 100  # Events per game

# True parameter values
base_rate <- -3.7   # Base log-odds for foul probability (~2.5% foul rate)
pre_all_star_rate <- -3 # log-odds for foul probability pre all star break
player_sd <- 0.3    # SD for player random effects
team_sd <- 0.2      # SD for team effects
period_sd <- 0.15   # SD for period effects
game_sd <- 0.25     # SD for game effects
teammate_effect <- 0.1  # Effect of teammate fouls

# Define positions and their baseline foul tendencies
positions <- c("Guard", "Forward", "Center")
position_effects <- c(-0.2, 0, 0.3)  # Assumes centers (biggest guys) foul more than guards (littlest guys) 
names(position_effects) <- positions

# Generate player effects
set.seed(123)
player_effects <- rnorm(n_players, 0, player_sd)
names(player_effects) <- paste0("Player_", 1:n_players)

# Assign positions to players
# Same number of players for each position
player_positions <- sample(positions, n_players, replace = TRUE, 
                          prob = c(0.33, 0.33, 0.33))
names(player_positions) <- names(player_effects)

# Generate team effects
n_teams <- 5
team_effects <- rnorm(n_teams, 0, team_sd)
teams <- paste0("Team_", LETTERS[1:n_teams])
names(team_effects) <- teams

# Generate game effects
game_effects <- rnorm(n_games, 0, game_sd)
names(game_effects) <- paste0("Game_", 1:n_games)

# Generate period effects
period_effects <- rnorm(4, 0, period_sd)
names(period_effects) <- paste0("Period_", 1:4)

# Function to simulate one game's events
simulate_game <- function(game_id) {
  # Create data frame for this game
  game_data <- data.frame()
  
  # Assign teams for this game
  home_team <- sample(teams, 1)
  away_team <- sample(setdiff(teams, home_team), 1)
  
  # Assign pre or post all star category
  
  pre_all_star <- rbinom(1,1,.7)
  
  # Track accumulated fouls for each player
  player_fouls <- rep(0, n_players)
  names(player_fouls) <- paste0("Player_", 1:n_players)
  
  # Assign players to teams (5 players per team)
  # Make sure each team has one player of each position
  home_players <- character(5)
  away_players <- character(5)
  
  for (pos in 1:5) {
    pos_players <- names(player_positions[player_positions == positions[pos]])
    if (length(pos_players) >= 2) {
      selected <- sample(pos_players, 2)
      home_players[pos] <- selected[1]
      away_players[pos] <- selected[2]
    } else {
      # Fallback if not enough players of a position
      available <- setdiff(names(player_positions), c(home_players, away_players))
      home_players[pos] <- sample(available, 1)
      available <- setdiff(available, home_players[pos])
      away_players[pos] <- sample(available, 1)
    }
  }
  
  for (event in 1:n_events_per_game) {
    # Determine period (1-4)
    current_period <- ceiling(event / (n_events_per_game/4))
    
    # For each player on defense, simulate potential foul
    defending_team <- ifelse(event %% 2 == 0, home_team, away_team)
    defending_players <- ifelse(defending_team == home_team, list(home_players), list(away_players))[[1]]
    
    for (player in defending_players) {
      # Get teammates
      teammates <- setdiff(defending_players, player)
      
      # Get player position
      player_position <- player_positions[player]
      
      # Calculate foul probability
      # If a game happened after all star break, it gets the base fouling rate
      # If a game happened before all star break, it gets the pre all star fouling rate
      if pre_all_star
        logit_p <- pre_all_star_rate + 
                 player_effects[player] + 
                 position_effects[player_position] +  # Add position effect
                 team_effects[defending_team] +
                 period_effects[paste0("Period_", current_period)] +
                 game_effects[paste0("Game_", game_id)]
      else:
        logit_p <- base_rate + 
                 player_effects[player] + 
                 position_effects[player_position] +  # Add position effect
                 team_effects[defending_team] +
                 period_effects[paste0("Period_", current_period)] +
                 game_effects[paste0("Game_", game_id)]

      p <- plogis(logit_p)
      
      # Simulate foul occurrence
      foul_occurs <- rbinom(1, 1, p)
      
      # Add row to game data
      event_data <- data.frame(
        game_id = paste0("Game_", game_id),
        pre_allstar = pre_all_star,
        number_event = event,
        period = current_period,
        player_name = player,
        position = player_position,  # Add position to data
        slug_team = defending_team,
        slug_opp = ifelse(defending_team == home_team, away_team, home_team),
        personal_fouls_during_event = player_fouls[player],
        personal_foul_occurance_on_player = foul_occurs,
        act_type = sample(c("2pt", "3pt", "drive"), 1)
      )
      
      # Add teammate information
      for (tm in teammates) {
        event_data$teammate_name <- tm
        event_data$teammate_position <- player_positions[tm]  # Add teammate position
        event_data$teammate_fouls <- player_fouls[tm]
        game_data <- rbind(game_data, event_data)
      }
      
      # Update player fouls if a foul occurred
      if (foul_occurs) {
        player_fouls[player] <- player_fouls[player] + 1
      }
    }
  }
  
  return(game_data)
}

# Simulate all games
sim_data <- do.call(rbind, lapply(1:n_games, simulate_game))
```

